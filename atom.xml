<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Min's notes]]></title>
  <link href="http://liminzju.github.io/atom.xml" rel="self"/>
  <link href="http://liminzju.github.io/"/>
  <updated>2014-04-30T14:42:45+08:00</updated>
  <id>http://liminzju.github.io/</id>
  <author>
    <name><![CDATA[Min]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convert svn to git]]></title>
    <link href="http://liminzju.github.io/blog/2014/04/30/conver-svn-to-git/"/>
    <updated>2014-04-30T17:02:12+08:00</updated>
    <id>http://liminzju.github.io/blog/2014/04/30/conver-svn-to-git</id>
    <content type="html"><![CDATA[<h1>Convert svn to git: case study <code>axis2</code> project</h1>

<h3>About me</h3>

<p>This page is to desribe svn to git conversion with taking <code>axis2/rampart</code>(under Z:\3rdParty_Source) for case study.</p>

<h3>Background</h3>

<p><code>axis2/rampart</code> is 3rdParty code used in our product. These two projects were added to clearcase 2 years ago. The offical code is managed by svn. We want to have our work based code storing to gitlab for further usage.</p>

<h3>Problems</h3>

<ol>
<li>These two projects don&rsquo;t have svn information. We don&rsquo;t know their svn revision.</li>
<li>Both of the projects have tons of checkins/tags/branches. We only need code/history under trunk.</li>
</ol>


<h3>Find code revision</h3>

<p>First we need to check the clearcase version tree to get the first checkin time of <code>axis2c-src-latest-pre-1.7.0.zip</code>. It is about 2010-08.</p>

<p>Second svn co the latest repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn co http://svn.apache.org/repos/asf/axis/axis2/c/core/trunk</span></code></pre></td></tr></table></div></figure>


<p>Then we can use <code>svn log</code> to get the logs before <code>2010-08</code>.</p>

<p>On windows, I have <code>TortoiseSVN</code> installed, it has GUI to find log for specific file. And we can use <code>WINMerge</code> to compare folder.</p>

<p>Following is what I do to find the revision:</p>

<ol>
<li>On Win, unzip <code>axis2c-src-latest-pre-1.7.0.zip</code> to <code>axis2c-src-latest-pre-1.7.0</code>.</li>
<li>On Linux, pick a revison number before <code>2010-08</code> by using svn log, for example <code>r965406</code>.</li>
<li>On Win, update windows code which with folder <code>axis2c</code> to revision <code>r965406</code>.</li>
<li>Compare folder <code>axis2c-src-latest-pre-1.7.0</code> and <code>axis2c</code>.</li>
<li>If code not match, use <code>TortoiseSVN</code> to look the checkin log of diff file. Then Pick an earlier revision.</li>
<li>Report step 3 &ndash; step 5 until you find the right revison.</li>
</ol>


<p>Finally, I find the axis2c revision is <code>965406</code>. And rampart is <code>926565</code>.</p>

<h3>Svn to git</h3>

<ul>
<li>Fetch svn repo by git-svn</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ makedir axis2c
</span><span class='line'>$ cd axis2c
</span><span class='line'>$ git svn init http://svn.apache.org/repos/asf/axis/axis2/c/core/trunk
</span><span class='line'>$ git fetch // This will take a few hours since axis2c has 1.5 million revisions</span></code></pre></td></tr></table></div></figure>


<ul>
<li>create project on gitlab for axis2c</li>
<li>create branch/tag for axis2c r965406 in git</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git svn find-rev r965406
</span><span class='line'>7e3146268ea776206f146473ffd172ddc18cbbf8
</span><span class='line'>$ git checkout 7e3146268ea776206f146473ffd172ddc18cbbf8
</span><span class='line'>$ git tag -a mstr_r965406
</span><span class='line'>$ git checkout -b mstrbased
</span><span class='line'>$ git remote add origin git@ctc-hd-2:axis2c/axis2c.git
</span><span class='line'>$ git push -u origin master
</span><span class='line'>$ git push -u origin --tag mstr_r965406
</span><span class='line'>$ git push -u origin mstrbased
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Do same thing for rampart</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ makedir rampart
</span><span class='line'>$ cd rampart
</span><span class='line'>$ git svn init http://svn.apache.org/repos/asf/axis/axis2/c/rampart/trunk
</span><span class='line'>$ git fetch // This will take a few hours since rampart has 1.1 million revisions
</span><span class='line'>
</span><span class='line'>$ git svn find-rev r926565
</span><span class='line'>b78df61ab875f378eb2378ee2b60fecd9f9f71ac
</span><span class='line'>$ git checkout b78df61ab875f378eb2378ee2b60fecd9f9f71ac
</span><span class='line'>$ git tag -a mstr_r926565
</span><span class='line'>$ git checkout -b mstrbased
</span><span class='line'>$ git remote add origin git@ctc-hd-2:axis2c/rampart.git
</span><span class='line'>$ git push -u origin master
</span><span class='line'>$ git push -u origin --tag mstr_r926565
</span><span class='line'>$ git push -u origin mstrbased
</span></code></pre></td></tr></table></div></figure>


<h3>instructions for git-svn fetch in remote repo</h3>

<p>Take rampart for example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@ctc-hd-2:axis2c/rampart.git
</span><span class='line'>$ cd rampart
</span><span class='line'>$ git svn init http://svn.apache.org/repos/asf/axis/axis2/c/rampart/trunk  // or edit .git/config directly 
</span><span class='line'>$ cat .git/config
</span><span class='line'>[core]
</span><span class='line'>  repositoryformatversion = 0
</span><span class='line'>  filemode = true
</span><span class='line'>  bare = false
</span><span class='line'>  logallrefupdates = true
</span><span class='line'>[remote "origin"]
</span><span class='line'>  fetch = +refs/heads/*:refs/remotes/origin/*
</span><span class='line'>  url = git@ctc-hd-2:axis2c/rampart.git
</span><span class='line'>[branch "master"]
</span><span class='line'>  remote = origin
</span><span class='line'>  merge = refs/heads/master
</span><span class='line'>[svn-remote "svn"]
</span><span class='line'>  url = http://svn.apache.org/repos/asf/axis/axis2/c/rampart/trunk
</span><span class='line'>  fetch = :refs/remotes/git-svn
</span><span class='line'>
</span><span class='line'>//Copy sha from original repo:
</span><span class='line'>$ echo  50e548d713a6aa58c527d6ad45b3381107f9e83a &gt;&gt; .git/refs/remotes/git-svn
</span><span class='line'>$ git fetch
</span></code></pre></td></tr></table></div></figure>


<p>Racap:</p>

<ul>
<li>Add the svn-remote to .git/config</li>
<li>Add a pointer/SHA in .git/refs/remotes/git-svn</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free disk space used by CDH hadoop]]></title>
    <link href="http://liminzju.github.io/blog/2014/04/29/free-disk-space-used-by-cdh/"/>
    <updated>2014-04-29T17:02:12+08:00</updated>
    <id>http://liminzju.github.io/blog/2014/04/29/free-disk-space-used-by-cdh</id>
    <content type="html"><![CDATA[<h1>Free disk space used by CDH hadoop</h1>

<p>Our Linux machine has only 50G for /. It is very small for our cdh hadoop service. The disk space can be used out easily. So we need to move these data to a disk with enough space.</p>

<h4>Disk healthy check on linux</h4>

<p>Let&rsquo;s see the disk usage statistics:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@ctc-hd-1 home]# df -hFilesystem            Size  Used Avail Use% Mounted on/dev/mapper/vg_ctchd1-lv_root                       50G   26G   24G  53% /tmpfs                 3.8G  272K  3.8G   1% /dev/shm/dev/sda1             485M   38M  422M   9% /boot/dev/mapper/vg_ctchd1-lv_home                      400G   29G  351G   8% /home```
</span><span class='line'>And the top disk ocuupied folers of CDH Installation are:
</span><span class='line'>```/dfs  // hdfs files, data [root@ctc-hd-3 ~]# du -sh /dfs/18G     /dfs/
</span><span class='line'>/opt/cloudera // upgrading packages, configurations
</span><span class='line'>[root@ctc-hd-3 ~]# du -sh /opt/cloudera/13G     /opt/cloudera/```
</span><span class='line'>
</span><span class='line'>#### Free disk usage
</span><span class='line'>/home has 400G, so we want to mv both /dfs and /opt/cloudera to /home so that we can free disk usage for /dev/mapper/vg_ctchd1-lv_root:
</span><span class='line'>
</span><span class='line'>- First stop all hadoop related service from cdh manager web page.
</span><span class='line'>
</span><span class='line'>- Then mv the folder and create soft link to original path for all machines in the cluster
</span></code></pre></td></tr></table></div></figure>


<p>[root@ctc-hd-3 home]# mv /opt/cloudera /home/cloudera
[root@ctc-hd-3 home]# ln -s /home/cloudera /opt/cloudera
[root@ctc-hd-3 home]# mv /dfs /home/dfs
[root@ctc-hd-3 home]# ln -s /home/dfs /dfs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>- start hadoop service from cdh manager.
</span><span class='line'>
</span><span class='line'>#### However..
</span><span class='line'>However, I forgot to stop hbase/hive/impala ... before mv the files. So have to restart those services in cloudera manager page / linux terminal.
</span></code></pre></td></tr></table></div></figure>


<p>Need to check the hdfs:
$ sudo -u hdfs hdfs fsck /
We got The filesystem under path &lsquo;/&rsquo; is currput
So run cmd:
$ sudo -u hdfs hdfs fsck / -remove
The filesystem under path &lsquo;/&rsquo; is HEALTHY</p>

<p>Then restart hbase in cloudera manager page&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use gitlab on windows]]></title>
    <link href="http://liminzju.github.io/blog/2014/04/25/use-git-on-windows/"/>
    <updated>2014-04-25T17:02:12+08:00</updated>
    <id>http://liminzju.github.io/blog/2014/04/25/use-git-on-windows</id>
    <content type="html"><![CDATA[<h1>Use gitlab on windows</h1>

<hr />

<h3>Install git for windows</h3>

<ol>
<li><p>Download <a href="https://msysgit.googlecode.com/files/Git-1.9.0-preview20140217.exe">git</a> &amp; Install with default setting.</p></li>
<li><p>Config Home Path</p></li>
</ol>


<p>Modify git home path. By default it use driver u as home path in my windwos, but you may don&rsquo;t have permission to that driver. Find &ldquo;profile&rdquo; file in D:\Program Files (x86)\Git\etc. Find following lines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">HOME</span><span class="o">=</span><span class="s2">&quot;$(cd &quot;</span><span class="nx">$HOME</span><span class="s2">&quot; ; pwd)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add one line before it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">HOME</span><span class="o">=</span><span class="s2">&quot;D:\GITHOME&quot;</span>
</span><span class='line'><span class="nx">HOME</span><span class="o">=</span><span class="s2">&quot;$(cd &quot;</span><span class="nx">$HOME</span><span class="s2">&quot; ; pwd)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Add SSH Key</h3>

<ol>
<li>Open &ldquo;Git Bash&rdquo;, and type ssh-keygen and paste pub key to your profile at gitlab.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">ssh</span><span class="o">-</span><span class="nx">keygen</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cat</span> <span class="o">~</span><span class="err">/ssh/id_rsa.pub</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>Open <a href="http://ctc-hd-2/profile/keys">http://ctc-hd-2/profile/keys</a> in your web browser. Then Add SSH Key.</p></li>
<li><p>Now you can create a new project in git, and use the instructions to create your repo in Git Bash.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Octopress on Mavericks]]></title>
    <link href="http://liminzju.github.io/blog/2014/04/25/setup-octopress-on-mavericks/"/>
    <updated>2014-04-25T17:02:12+08:00</updated>
    <id>http://liminzju.github.io/blog/2014/04/25/setup-octopress-on-mavericks</id>
    <content type="html"><![CDATA[<h1>Setup Octopress on Mavericks</h1>

<p><a href="http://octopress.org">Octopress</a> is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages.</p>

<p>I use <a href="http://blog.segmentfault.com/yaashion_xiang/1190000000364677">Yasshion_向</a>&rsquo;s instruction as reference. However, ruby1.9.3 can&rsquo;t be installed by brew. So I use <a href="rvm.io">rvm</a> to install ruby. Works perfectly!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert bzr to git]]></title>
    <link href="http://liminzju.github.io/blog/2014/04/25/convert-bzr-to-git/"/>
    <updated>2014-04-25T17:02:12+08:00</updated>
    <id>http://liminzju.github.io/blog/2014/04/25/convert-bzr-to-git</id>
    <content type="html"><![CDATA[<h1>Convert bzr to git</h1>

<h2>Overview</h2>

<p>Some 3rdParty library uses bazzar to manage code, we want to use gitlab to manage those bzr code. This document is a quick instruction to convert a <code>bzr to git</code>.</p>

<h3>Install related softwares</h3>

<ul>
<li>Install bzr, bzr-fastimport,<em> Install python-fastimport(0.9.2), the lastest version(0.9.4?) will cause bzr fastexport running to cant import binary stream problem. So we chose 0.9.2.My python version is 2.7.x on windows, 2.6.x on mac/linux. 2.7.x not work with bzr fastexport on mac.### Convert bzr to gitOn your linux/Mac:
<code>bzr clone lp:xx bzr2gitcd bzr2gitgit initbzr fast-export --plain . | git fast-import
</code></em> Now you got a existing git repo, push it to git### Push git project to gitlab* Open gitlab webpage, login and create a project, e.g. named bzr2git, following the <code>existing repo instruction to push</code> your branch, this instrunction will show when you create a new git project.
<code>git checkout -f mastergit remote add origin git@ctc-hd-1:mili/bzr2git.gitgit push –u origin master</code>

<h3>Update codeIf bzr has some new checkins, you can do the steps on your machine to import new checkins to git. If you run to some error in final step <code>git push –u origin master</code>, you can force git to push<code>git push –u origin +master</code>.</h3></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Issues of Integrating JdbcWrapper with Onetier]]></title>
    <link href="http://liminzju.github.io/blog/2014/04/24/issues-of-integrating-jdbcwrapper-with-onetier/"/>
    <updated>2014-04-24T17:02:12+08:00</updated>
    <id>http://liminzju.github.io/blog/2014/04/24/issues-of-integrating-jdbcwrapper-with-onetier</id>
    <content type="html"><![CDATA[<h1>Issues of Integrating JdbcWrapper with Onetier</h1>

<p>This page records issues we met when integrating JdbcWrapper with Onetier.</p>

<h2>CatalogInternal has different callstack on windows and mac</h2>

<p>Let&rsquo;s see the Mac callstack on child process side when creating a cataloginternal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3   libM8Base4.dylib                    0x000000010ee8123f _ZN5MBase17InteractiveAssertEPKcS1_i + 943
</span><span class='line'>4   libM8PDSrl2.dylib                   0x000000010f1ee247 _ZN14MSerialization18ReadDataStreamImpl10VerifyTypeENS_4TYPEE + 119
</span><span class='line'>5   libM8PDSrl2.dylib                   0x000000010f1f0917 _ZN14MSerialization18ReadDataStreamImplrsERNS_18SerializableObjectE + 39
</span><span class='line'>6   libM8DbCm3.dylib                    0x0000000111fa5488 _ZN13MMultiProcess29Execute4ParametersCommandImplIN3MDb15CatalogInternalEMS2_FvRKNS1_14DatabaseStringES5_S5_S5_ES3_S3_S3_S3_Li1ELb0EE11DeSerializeERN14MSerialization14ReadDataStreamE + 88
</span><span class='line'>7   libM8PrcCo2.dylib                   0x000000010efb3bd4 _ZN13MMultiProcess18ChildCommandHelper4ReadEv + 1940
</span><span class='line'>8   libM8PrcCo2.dylib                   0x000000010efb8672 _ZN13MMultiProcess22ChildCommandRunnerImpl4ReadEv + 1778
</span><span class='line'>9   libM8PrcCo2.dylib                   0x000000010efb86e3 _ZThn8_N13MMultiProcess22ChildCommandRunnerImpl4ReadEv + 35
</span><span class='line'>10  libM8PrcCo2.dylib                   0x000000010efb2c5c _ZN13MMultiProcess18ChildCommandHelper20ExecuteAndGetCommandEv + 60
</span><span class='line'>11  libM8PrcCo2.dylib                   0x000000010efb7916 _ZN13MMultiProcess22ChildCommandRunnerImpl7ExecuteEv + 54</span></code></pre></td></tr></table></div></figure>


<p>We can see we want to serialize DatabaseString in Frame 6, but Frame 5 uses ReadDataStreamImpl instead of using function in DatabaseString.cpp to serialize.</p>

<p>First, we doubted it was a binary issue. But after problem still occured after rebuild. So we have to compare windows callstack and mac callstack.</p>

<p>Some commands we use to debug mac process with lldb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lldb -p processid // attach process by pid
</span><span class='line'>
</span><span class='line'>n
</span><span class='line'>
</span><span class='line'>s
</span><span class='line'>
</span><span class='line'>finish
</span><span class='line'>
</span><span class='line'>br s --f FileName.cpp --l 12
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Simlar problem was met by Yuxiao before, so we use Yuxiao&rsquo;s suggestion to fix this issue.</p>

<p><code>
From: Xiao, Yuxiao Sent: Tuesday, April 22, 2014 12:33 AMTo: Li, Min; Zhu, Wei (Clark); Wu, Baoqi; Luo, MingCc: Luo, YiSubject: RE: Can you guys set up a meeting in CTC to discuss the JDBC connector today? In CatalogCommands.h, try bring highlighted files ahead of CommandMacros.h, that should solve the problem. I remember running similar issue with another command before.  #include "Database/Database/MultiProcessTable.h"#include "Database/Database/ProtectedSource/StreamHelpers.h"#include "Database/Database/ProtectedSource/CatalogInternal.h"#include "Database/Database/ProtectedSource/DatabaseString.h"#include "MultiProcess/Defines/CommandMacros.h"#include "Database/Database/Error.h" </code></p>

<h2>ChildProcess crash in JNISupport</h2>

<p>This is a caused by we use short name in MSIReg for jars on mac. And code in JNISupport will compare jar names from MSIReg with Jar name setting in code.
<code>[HKEY_LOCAL_MACHINE\SOFTWARE\MicroStrategy\JNI Bridge\Config for DataServices]"Common ClassPath"="Jar/JCO.jar:Jar/ApachePOI.jar:Jar/MSTRExcelReader.jar:Jar/MSTRJDBCHelper.jar:Jar/DropboxAPI.jar:Jar/DropboxAPI2.jar:Jar/GDriveAPI.jar"
</code>
The length of <code>Jar/JCO.jar</code> is 11. However, if we set MSTRJDBCHelper.jar with length larger than 11. Then crash. See code:
&#8220;`</p>

<pre><code>size_t expectedPos = (lTokens[j].length() - irJarFileNames[i].length()); // get a very big size_t   if(expectedPos &gt;= 0 &amp;&amp; lTokens[j].compare(expectedPos, irJarFileNames[i].length(), irJarFileNames[i]) == 0)```
</code></pre>

<p>Fix it by check the size_t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install GitLab on centos 6.2]]></title>
    <link href="http://liminzju.github.io/blog/2014/04/23/install-gitlab-on-centos/"/>
    <updated>2014-04-23T17:02:12+08:00</updated>
    <id>http://liminzju.github.io/blog/2014/04/23/install-gitlab-on-centos</id>
    <content type="html"><![CDATA[<h1>Install GitLab on centos 6.2## Overview</h1>

<p>Simple instruction to install gitlab.</p>

<h3>Install</h3>

<p>According to <a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md">reference</a>.
Download community version of <a href="https://www.gitlab.com/downloads/">gitlab(omnibus)</a>, it’s free.
<code>shsudo yum install openssh-serversudo yum install postfix # sendmail or exim is also OKsudo rpm -i gitlab-x.y.z_omnibus-x.el6.x86_64.rpm # this is the .rpm you downloadedsudo gitlab-ctl reconfiguresudo lokkit -s http -s ssh # open up the firewall for HTTP and SSH requestssudo gitlab-ctl start # Start all GitLab components</code></p>

<h3>Configuration</h3>

<p><code>
sudo mkdir -p /etc/gitlab # Creating the gitlab.rb configuration filesudo touch /etc/gitlab/gitlab.rbsudo chmod 600 /etc/gitlab/gitlab.rbAdd to gitlab.rb:git_data_dir "/home/gd/git-data"Run sudo gitlab-ctl reconfigure</code></p>

<p>Type <a href="">http://ip</a> in chrome,  if the page does not show correctly, then you need a reboot.You can login as an admin user with username <code>root</code> and password <code>5iveL!fe</code>.### Use gitlab
First you need to add sshkey
* Login with your own id to gitlab<em> In profile setttings, add a ssh pub key * In Linux terminal, run <code>$ ssh-keygen</code></em> Copy content from ~/.ssh/id_rsa.pub to step2</p>
]]></content>
  </entry>
  
</feed>
